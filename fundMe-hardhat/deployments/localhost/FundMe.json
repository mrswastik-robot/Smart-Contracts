{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithDrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withDrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x831751ccfae0d020a3bea3a63ca22f2b3146fb25b32ecb6feaab3e6232c3a7d6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1054713",
    "logsBloom": "0x
    "blockHash": "0x7ec4d0045783cd69f8ebf8e9d841a1c2dc582119ae6415d9d52728eafa6d9d0d",
    "transactionHash": "0x831751ccfae0d020a3bea3a63ca22f2b3146fb25b32ecb6feaab3e6232c3a7d6",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1054713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c06d677c91ee5b7000a4d6ef46c8b021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithDrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract FundMe\\n{\\n    using PriceConverter for uint;\\n\\n    uint public constant MINIMUM_USD = 50*10**18;\\n    address[] public funders;\\n    mapping (address => uint) public addressToAmountFunded;\\n\\n    address public owner;\\n\\n    //now making changes coz we are being fundMe to hardhat\\n    //watch at around 10:25:00\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress)           //jabbhi deploy krte hain contract waise hi sbse pehle constructor call hota hain , to jaise hi sbse pehle jisne deploy kiya usi ko apan owner set kr diye\\n    {\\n        owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    modifier onlyOwner\\n    {\\n        require(msg.sender == owner,\\\"You are not the owner of this contract.\\\");\\n        _;\\n    }\\n\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n\\n\\n\\n    function fund() public payable \\n    {\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!!\\\");      //equal to getConversionRate(msg.value) , kyunki library se extract kr rahe na function , to msg.value will already be considered as the first parameter to getConversionRate\\n\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withDrawAll() public onlyOwner// contract me bhej to koi bhi skta lekin withdraw sirf owner kr skta jisne deploy kiya contract , sbse pehle msg.sender ko hi apan owner banane waale hain constructor ki madad se\\n    {\\n        for(uint index=0; index<funders.length; index++)\\n        {\\n            address funderAddress = funders[index];\\n            addressToAmountFunded[funderAddress] = 0;\\n        }\\n        //'funders' array se saare funders uthaaye ek ek kr k , unka address store krte gye 'funderAddress' me aur waha se mapping wali chiz me amount funded by that specific address '0' krte gye\\n\\n        //resetting the array kyunki abto saare funders khatam , sbke paise utha liye apan ne\\n        funders = new address[](0); \\n\\n        //lekin abhi tk actual paise to transfer kiye hi nhi , chaahe to .send ya .transfer() use kr skte the  .... watch at around 4:53:00\\n\\n        (bool callSuccess, ) = payable (owner).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    //watch at 11:52:00\\n    //this withDrawAll function is playing too much with storage variables hence taking alot of gas , so we will make a new function which will be more efficient\\n    function cheaperWithDrawAll () public onlyOwner\\n    {\\n        address[] memory m_funders = funders;           //we will read this 'funders' array from storage and store it in memory for less gas usage\\n        \\n        for(uint index=0; index<m_funders.length; index++)       //now instead of using storgae variable 'funders' , we will use memory variable 'm_funders'\\n        {\\n            address funderAddress = m_funders[index];\\n            addressToAmountFunded[funderAddress] = 0;\\n        }\\n\\n        funders = new address[](0);\\n        (bool callSuccess, ) = payable (owner).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n}\",\"keccak256\":\"0x5062df2be9884597abe9bdb9160a2c6c353bc12f5d341cc8b5f785a6b7170e7d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter\\n{\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint)            //library me har function me internal dena hota\\n    {\\n        //  AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // );\\n\\n        //ye upar wala code aur address aggregator k andr jo that wo shi tha sirf sepolia k liye, abhi humne constructor me address pass kiya hain jis bhi chain ka chahiye fundMe k andar aur \\n        //waha se yaha getConversion me bheja phir getPrice me ab yaha se priceFeed ko neeche use kr k uss chain k hisaab se price nikal liya\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(uint ethAmount , AggregatorV3Interface priceFeed) internal view returns(uint)\\n    {\\n        uint ethPrice = getPrice(priceFeed);\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 1000000000000000000;\\n\\n        return ethAmountInUSD;\\n\\n    }\\n    \\n}\\n\\n\",\"keccak256\":\"0xfe45185c83472866630b8c0184b69595aed4ccbfc346c796a8545f084293a654\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012b7380380620012b783398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b61114b806200016c6000396000f3fe60806040526004361061007f5760003560e01c8063991671e21161004e578063991671e214610156578063b60d42881461016d578063d9eacceb14610177578063dc0d3dff1461018e5761008e565b80633e47d6f3146100985780636b69a592146100d5578063741bef1a146101005780638da5cb5b1461012b5761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610acb565b610306565b6040516100cc9190610b11565b60405180910390f35b3480156100e157600080fd5b506100ea61031e565b6040516100f79190610b11565b60405180910390f35b34801561010c57600080fd5b5061011561032b565b6040516101229190610b8b565b60405180910390f35b34801561013757600080fd5b50610140610351565b60405161014d9190610bb5565b60405180910390f35b34801561016257600080fd5b5061016b610377565b005b6101756101cb565b005b34801561018357600080fd5b5061018c6105e4565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bfc565b6108b5565b6040516101c29190610bb5565b60405180910390f35b6802b5e3af16b188000061020a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f490919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c86565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fd9190610cd5565b92505081905550565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fe90610d7b565b60405180910390fd5b60005b6000805490508110156104b257600080828154811061042c5761042b610d9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104aa90610dca565b91505061040a565b50600067ffffffffffffffff8111156104ce576104cd610e12565b5b6040519080825280602002602001820160405280156104fc5781602001602082028036833780820191505090505b50600090805190602001906105129291906109c1565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161055b90610e72565b60006040518083038185875af1925050503d8060008114610598576040519150601f19603f3d011682016040523d82523d6000602084013e61059d565b606091505b50509050806105e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d890610ed3565b60405180910390fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b90610d7b565b60405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ad575b5050505050905060005b815181101561078257600082828151811061071f5761071e610d9b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077a90610dca565b915050610701565b50600067ffffffffffffffff81111561079e5761079d610e12565b5b6040519080825280602002602001820160405280156107cc5781602001602082028036833780820191505090505b50600090805190602001906107e29291906109c1565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161082b90610e72565b60006040518083038185875af1925050503d8060008114610868576040519150601f19603f3d011682016040523d82523d6000602084013e61086d565b606091505b50509050806108b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a890610ed3565b60405180910390fd5b5050565b600081815481106108c557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061090083610930565b90506000670de0b6b3a764000085836109199190610ef3565b6109239190610f64565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190611022565b5050509150506402540be400816109b9919061109d565b915050919050565b828054828255906000526020600020908101928215610a3a579160200282015b82811115610a395782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e1565b5b509050610a479190610a4b565b5090565b5b80821115610a64576000816000905550600101610a4c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9882610a6d565b9050919050565b610aa881610a8d565b8114610ab357600080fd5b50565b600081359050610ac581610a9f565b92915050565b600060208284031215610ae157610ae0610a68565b5b6000610aef84828501610ab6565b91505092915050565b6000819050919050565b610b0b81610af8565b82525050565b6000602082019050610b266000830184610b02565b92915050565b6000819050919050565b6000610b51610b4c610b4784610a6d565b610b2c565b610a6d565b9050919050565b6000610b6382610b36565b9050919050565b6000610b7582610b58565b9050919050565b610b8581610b6a565b82525050565b6000602082019050610ba06000830184610b7c565b92915050565b610baf81610a8d565b82525050565b6000602082019050610bca6000830184610ba6565b92915050565b610bd981610af8565b8114610be457600080fd5b50565b600081359050610bf681610bd0565b92915050565b600060208284031215610c1257610c11610a68565b5b6000610c2084828501610be7565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448212100000000600082015250565b6000610c70601c83610c29565b9150610c7b82610c3a565b602082019050919050565b60006020820190508181036000830152610c9f81610c63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce082610af8565b9150610ceb83610af8565b9250828201905080821115610d0357610d02610ca6565b5b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320636f60008201527f6e74726163742e00000000000000000000000000000000000000000000000000602082015250565b6000610d65602783610c29565b9150610d7082610d09565b604082019050919050565b60006020820190508181036000830152610d9481610d58565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610dd582610af8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e0757610e06610ca6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e5c600083610e41565b9150610e6782610e4c565b600082019050919050565b6000610e7d82610e4f565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ebd600b83610c29565b9150610ec882610e87565b602082019050919050565b60006020820190508181036000830152610eec81610eb0565b9050919050565b6000610efe82610af8565b9150610f0983610af8565b9250828202610f1781610af8565b91508282048414831517610f2e57610f2d610ca6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6f82610af8565b9150610f7a83610af8565b925082610f8a57610f89610f35565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb481610f95565b8114610fbf57600080fd5b50565b600081519050610fd181610fab565b92915050565b6000819050919050565b610fea81610fd7565b8114610ff557600080fd5b50565b60008151905061100781610fe1565b92915050565b60008151905061101c81610bd0565b92915050565b600080600080600060a0868803121561103e5761103d610a68565b5b600061104c88828901610fc2565b955050602061105d88828901610ff8565b945050604061106e8882890161100d565b935050606061107f8882890161100d565b925050608061109088828901610fc2565b9150509295509295909350565b60006110a882610fd7565b91506110b383610fd7565b92508282026110c181610fd7565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110f9576110f8610ca6565b5b828205841483151761110e5761110d610ca6565b5b509291505056fea264697066735822122001fa94dccad2cb382acd803c13f58513d85043f4a12dc881e98f4e0576fd18bf64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063991671e21161004e578063991671e214610156578063b60d42881461016d578063d9eacceb14610177578063dc0d3dff1461018e5761008e565b80633e47d6f3146100985780636b69a592146100d5578063741bef1a146101005780638da5cb5b1461012b5761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610acb565b610306565b6040516100cc9190610b11565b60405180910390f35b3480156100e157600080fd5b506100ea61031e565b6040516100f79190610b11565b60405180910390f35b34801561010c57600080fd5b5061011561032b565b6040516101229190610b8b565b60405180910390f35b34801561013757600080fd5b50610140610351565b60405161014d9190610bb5565b60405180910390f35b34801561016257600080fd5b5061016b610377565b005b6101756101cb565b005b34801561018357600080fd5b5061018c6105e4565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bfc565b6108b5565b6040516101c29190610bb5565b60405180910390f35b6802b5e3af16b188000061020a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f490919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c86565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fd9190610cd5565b92505081905550565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fe90610d7b565b60405180910390fd5b60005b6000805490508110156104b257600080828154811061042c5761042b610d9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104aa90610dca565b91505061040a565b50600067ffffffffffffffff8111156104ce576104cd610e12565b5b6040519080825280602002602001820160405280156104fc5781602001602082028036833780820191505090505b50600090805190602001906105129291906109c1565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161055b90610e72565b60006040518083038185875af1925050503d8060008114610598576040519150601f19603f3d011682016040523d82523d6000602084013e61059d565b606091505b50509050806105e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d890610ed3565b60405180910390fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b90610d7b565b60405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ad575b5050505050905060005b815181101561078257600082828151811061071f5761071e610d9b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077a90610dca565b915050610701565b50600067ffffffffffffffff81111561079e5761079d610e12565b5b6040519080825280602002602001820160405280156107cc5781602001602082028036833780820191505090505b50600090805190602001906107e29291906109c1565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161082b90610e72565b60006040518083038185875af1925050503d8060008114610868576040519150601f19603f3d011682016040523d82523d6000602084013e61086d565b606091505b50509050806108b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a890610ed3565b60405180910390fd5b5050565b600081815481106108c557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061090083610930565b90506000670de0b6b3a764000085836109199190610ef3565b6109239190610f64565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190611022565b5050509150506402540be400816109b9919061109d565b915050919050565b828054828255906000526020600020908101928215610a3a579160200282015b82811115610a395782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e1565b5b509050610a479190610a4b565b5090565b5b80821115610a64576000816000905550600101610a4c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9882610a6d565b9050919050565b610aa881610a8d565b8114610ab357600080fd5b50565b600081359050610ac581610a9f565b92915050565b600060208284031215610ae157610ae0610a68565b5b6000610aef84828501610ab6565b91505092915050565b6000819050919050565b610b0b81610af8565b82525050565b6000602082019050610b266000830184610b02565b92915050565b6000819050919050565b6000610b51610b4c610b4784610a6d565b610b2c565b610a6d565b9050919050565b6000610b6382610b36565b9050919050565b6000610b7582610b58565b9050919050565b610b8581610b6a565b82525050565b6000602082019050610ba06000830184610b7c565b92915050565b610baf81610a8d565b82525050565b6000602082019050610bca6000830184610ba6565b92915050565b610bd981610af8565b8114610be457600080fd5b50565b600081359050610bf681610bd0565b92915050565b600060208284031215610c1257610c11610a68565b5b6000610c2084828501610be7565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448212100000000600082015250565b6000610c70601c83610c29565b9150610c7b82610c3a565b602082019050919050565b60006020820190508181036000830152610c9f81610c63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce082610af8565b9150610ceb83610af8565b9250828201905080821115610d0357610d02610ca6565b5b92915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320636f60008201527f6e74726163742e00000000000000000000000000000000000000000000000000602082015250565b6000610d65602783610c29565b9150610d7082610d09565b604082019050919050565b60006020820190508181036000830152610d9481610d58565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610dd582610af8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e0757610e06610ca6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e5c600083610e41565b9150610e6782610e4c565b600082019050919050565b6000610e7d82610e4f565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ebd600b83610c29565b9150610ec882610e87565b602082019050919050565b60006020820190508181036000830152610eec81610eb0565b9050919050565b6000610efe82610af8565b9150610f0983610af8565b9250828202610f1781610af8565b91508282048414831517610f2e57610f2d610ca6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6f82610af8565b9150610f7a83610af8565b925082610f8a57610f89610f35565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb481610f95565b8114610fbf57600080fd5b50565b600081519050610fd181610fab565b92915050565b6000819050919050565b610fea81610fd7565b8114610ff557600080fd5b50565b60008151905061100781610fe1565b92915050565b60008151905061101c81610bd0565b92915050565b600080600080600060a0868803121561103e5761103d610a68565b5b600061104c88828901610fc2565b955050602061105d88828901610ff8565b945050604061106e8882890161100d565b935050606061107f8882890161100d565b925050608061109088828901610fc2565b9150509295509295909350565b60006110a882610fd7565b91506110b383610fd7565b92508282026110c181610fd7565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110f9576110f8610ca6565b5b828205841483151761110e5761110d610ca6565b5b509291505056fea264697066735822122001fa94dccad2cb382acd803c13f58513d85043f4a12dc881e98f4e0576fd18bf64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}